import { Component, OnInit, inject } from '@angular/core'; // inject eklendi
import { CommonModule } from '@angular/common'; // CommonModule eklendi
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms'; // ReactiveFormsModule eklendi
import { ActivatedRoute, Router, RouterLink } from '@angular/router'; // RouterLink eklendi
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar'; // MatSnackBarModule eklendi
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select'; // Yorum satırındaki dropdown için eklendi
import { switchMap, catchError, filter } from 'rxjs/operators';
import { of } from 'rxjs';

import { CategoryService } from '../category.service';
import { CategoryRequestDto, CategoryResponseDto } from '../../../shared/models/category.model'; // .models -> .model
// import { HttpParams } from '@angular/common/http'; // Eğer parentCategories aktif edilirse gerekebilir

@Component({
  selector: 'app-category-form',
  standalone: true, // standalone yapıldı
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterLink, // RouterLink eklendi
    MatSnackBarModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatSlideToggleModule,
    MatButtonModule,
    MatIconModule,
    MatProgressSpinnerModule,
    MatSelectModule // Yorum satırındaki dropdown için eklendi
  ],
  templateUrl: './category-form.component.html',
  styleUrls: ['./category-form.component.scss']
})
export class CategoryFormComponent implements OnInit {
  // fb, categoryService, route, router, snackBar inject ile alınabilir. Şimdilik constructor'da bırakıyoruz.
  categoryForm!: FormGroup;
  isEditMode = false;
  categoryId: number | null = null;
  isLoading = false;
  pageTitle = 'Create New Category';
  // In a real app, parent categories would be fetched for a dropdown
  // parentCategories: CategoryResponseDto[] = [];

  constructor(
    private fb: FormBuilder,
    private categoryService: CategoryService,
    private route: ActivatedRoute,
    private router: Router,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit(): void {
    this.categoryForm = this.fb.group({
      name: ['', Validators.required],
      slug: [''], // Optional, can be auto-generated by backend
      description: [''],
      parentId: [null], // For parent category selection
      isActive: [true, Validators.required],
      displayOrder: [0, Validators.pattern('^[0-9]*$')],
      imageUrl: ['']
    });

    this.route.paramMap.pipe(
      filter(params => params.has('id')),
      switchMap(params => {
        this.isEditMode = true;
        this.pageTitle = 'Edit Category';
        this.categoryId = Number(params.get('id'));
        this.isLoading = true;
        return this.categoryService.getCategoryById(this.categoryId).pipe(
          catchError(err => {
            this.isLoading = false;
            this.snackBar.open(`Error loading category: ${err.error?.message || 'Unknown error'}`, 'Close', { duration: 5000 });
            this.router.navigate(['/categories']);
            return of(null);
          })
        );
      })
    ).subscribe(category => {
      if (category) {
        this.populateForm(category);
        this.isLoading = false;
      }
    });

    // TODO: Fetch parent categories for dropdown if needed
    // this.loadParentCategories();
  }

  populateForm(category: CategoryResponseDto): void {
    this.categoryForm.patchValue({
      name: category.name,
      slug: category.slug,
      description: category.description,
      parentId: category.parentId,
      isActive: category.isActive,
      displayOrder: category.displayOrder,
      imageUrl: category.imageUrl
    });
  }

  // loadParentCategories(): void {
  //   // Simplified: fetch all categories to be used as potential parents
  //   // In a real app, you might want to exclude the current category and its children
  //   this.categoryService.getAllCategories(new HttpParams().set('size', '1000')) // Fetch a large number for dropdown
  //     .subscribe(page => this.parentCategories = page.content);
  // }

  onSubmit(): void {
    if (this.categoryForm.invalid) {
      return;
    }

    this.isLoading = true;
    const categoryData: CategoryRequestDto = this.categoryForm.value;

    if (this.isEditMode && this.categoryId) {
      this.categoryService.updateCategory(this.categoryId, categoryData).subscribe({
        next: () => {
          this.isLoading = false;
          this.snackBar.open('Category updated successfully!', 'Close', { duration: 3000 });
          this.router.navigate(['/categories']);
        },
        error: (err) => {
          this.isLoading = false;
          this.snackBar.open(`Error updating category: ${err.error?.message || 'Unknown error'}`, 'Close', { duration: 5000 });
        }
      });
    } else {
      this.categoryService.createCategory(categoryData).subscribe({
        next: () => {
          this.isLoading = false;
          this.snackBar.open('Category created successfully!', 'Close', { duration: 3000 });
          this.router.navigate(['/categories']);
        },
        error: (err) => {
          this.isLoading = false;
          this.snackBar.open(`Error creating category: ${err.error?.message || 'Unknown error'}`, 'Close', { duration: 5000 });
        }
      });
    }
  }
}
